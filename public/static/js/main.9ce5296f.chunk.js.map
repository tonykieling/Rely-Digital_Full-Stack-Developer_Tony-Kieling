{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialState","name","email","App","refName","useRef","refEmail","refBtnShowSubmissions","useState","setState","handleChangeData","event","target","value","prevState","disableFormController","setDisableForm","disableFormFunction","newState","message","cssClass","buttonLabelGST","setButtonLabel","changeButtonGSTLabel","flag","setTimeout","current","focus","color","setColor","onClickShowSubmissions","a","blur","showDropBox","dropBoxClass","axios","get","headers","getData","showSubmissionsFunction","data","content","console","log","setDropBoxClass","submitData","preventDefault","validation","match","alert","post","record","showSubmissionsContent","setShowSubmissionsContent","result","length","map","e","i","className","autoFocus","id","type","onChange","ref","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ce5296f.chunk.js","sourcesContent":["import { useState, useRef } from \"react\";\nimport './App.css';\nimport axios from \"axios\";\n\n\n// delay time to show the success message after sending data (in miliseconds)\nconst delayChangeButtonLabel = 2000; \n\n// inital state for the form data\nconst initialState = {\n    name  : \"\",\n    email : \"\"\n};\n\n\nfunction App() {\n\n  const refName   = useRef(null);\n  const refEmail  = useRef(null);\n  const refBtnShowSubmissions = useRef(null);\n\n\n  // data form\n  // variables\n  const [{ name, email }, setState] = useState(initialState);\n\n  // it handles data changing, both name and business email\n  const handleChangeData = event => {\n    const { name, value } = event.target;\n    \n    setState(prevState => ({ \n      ...prevState, \n      [name]: value\n    }));\n  };\n\n  // it clears the form after recording data successfully\n  const clearDataForm = () => {\n    setState({ ...initialState });\n  } \n\n\n\n  // disable form controller\n  const [disableFormController, setDisableForm] = useState(false);\n\n  const disableFormFunction = (newState = false) => {\n    setDisableForm(newState);\n  }\n\n\n\n  // Get Started Today button = buttonLabelGST\n  const [buttonLabelGST, setButtonLabel] = useState({\n    message   : \"Get Started Today\",\n    cssClass  : \"btn-form\"\n  });\n\n  // it changes button label\n  const changeButtonGSTLabel = flag => {\n    if (flag === \"OK\") {\n      setButtonLabel({\n        ...buttonLabelGST,\n        message   : \"Data submitted successfully!\",\n        cssClass  : \"success-message\"\n      });\n      \n    } else {\n      //in case there is a fail, the message handling will differ\n      setButtonLabel({\n        ...buttonLabelGST,\n        message   : \"Something bad happened. Try again later!\",\n        cssClass  : \"fail-message\"\n      });      \n    }\n\n    setTimeout(() => {\n      \n      setButtonLabel({\n        ...buttonLabelGST,\n        message   : \"Get Started Today\",\n        cssClass  : \"btn-form\"\n      });\n\n      // it only clears the form when the data was recorded successfully\n      (flag === \"OK\") && clearDataForm();\n\n      setDisableForm();\n      refName.current.focus();\n    }, delayChangeButtonLabel);\n  };\n\n\n\n  // Show Submissions button\n  const [color, setColor] = useState(\"btn-form\")\n\n  const changeButtonColor = () => {\n    if (color === \"btn-form\") setColor(\"btn-green\");\n    else setColor(\"btn-form\");\n  }\n\n  const onClickShowSubmissions = async() => {\n    refBtnShowSubmissions.current.blur();\n    changeButtonColor();\n    showDropBox();\n\n    // it returns to the original button state and focus on Name field\n    if (dropBoxClass === \"display-dropbox\") {\n      refName.current.focus();\n      return;\n    }\n    \n    // const url = \"/contact\";\n    const url = \"http://localhost:3333/contact\";\n    try {\n      const getData = await axios.get( \n        url,\n        {  \n          headers: { \n            \"Content-Type\": \"application/json\"\n          }\n      });\n\n      showSubmissionsFunction(getData.data.content);\n\n    } catch(error) {\n      console.log(\"### ERROR:\", error);\n    }\n  };\n\n\n\n  // drop-down box\n  const [dropBoxClass, setDropBoxClass] = useState(\"no-display-dropbox\");\n\n  // show drop-down box\n  const showDropBox = () => {\n    if (dropBoxClass === \"no-display-dropbox\") setDropBoxClass(\"display-dropbox\");\n    else setDropBoxClass(\"no-display-dropbox\");\n  }\n\n\n\n  // it checks whether the data was typed\n  const validateForm = () => {\n    // it validates whether name and email were typed\n    if (!name || !email) return \"both\";\n\n    // it checks email formatting\n    if (email.match(\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")) return \"OK\";\n    \n    return \"email\";\n  }\n\n\n\n  // it submits form data\n  const submitData = async (event) => {\n    event.preventDefault();\n    \n    // it validates form data\n    const validation = validateForm();\n\n    if (validation !== \"OK\") {\n      if (validation === \"both\") {\n        alert(\"Please, enter Name and Business Email.\");\n        if (name) refEmail.current.focus();\n        else refName.current.focus();\n      } else if (validation === \"email\") {\n        alert(\"Email seems to be invalid\");\n        refEmail.current.focus();\n      }\n\n      return;\n    }\n\n    // it sends data to the server so it can be recorded on db\n    // const url = \"/contact\";\n    const url = \"http://localhost:3333/contact\";\n    const data = { name, email };\n\n    try {\n      const record = await axios.post( \n        url,\n        data,\n        {  \n          headers: { \n            \"Content-Type\": \"application/json\"\n          }\n      });\n\n      disableFormFunction(true);\n      \n      if (record.data.message)\n        changeButtonGSTLabel(\"OK\");\n        //after receiving success from axios:\n        // change button, disable form and after a while defined in delayChangeButtonLabel, clear the form and focus in Name again\n      else changeButtonGSTLabel(\"NOK\");\n      \n    } catch (error) {\n      console.log(\"### error post\", error);\n    }\n  };\n\n\n\n  // it handles show submissions\n  const [showSubmissionsContent, setShowSubmissionsContent] = useState(\"\");\n\n  const showSubmissionsFunction = data => {\n    const result = data.length\n      ? data.map((e, i) => \n          <li key = { i }>{e.name}, <span className = \"underline\">{e.email}</span></li>)\n      : <li key = { 1 }><b>No entries right now</b></li>\n\n    setShowSubmissionsContent(result);\n  }\n\n  return (\n    <div className = \"foundation\">\n      <div className = \"title-form\">\n        We think your company would be a great fit!\n      </div>\n\n      <form>\n        <p className = \"label-form\"> Name </p> \n        <input \n          autoFocus = { true }\n          id        = \"name\"\n          className = \"text-form\" \n          type      = \"text\"\n          name      = \"name\"\n          value     = { name }\n          onChange  = { handleChangeData }\n          ref       = { refName }\n          disabled  = { disableFormController }\n        ></input>\n\n        <p className = \"label-form\"> Email </p>\n        <input \n          id          = \"email\"\n          className   = \"text-form\" \n          type        = \"email\"\n          // placeholder = \"name@domain.ca\"\n          name        = \"email\"\n          value       = { email }\n          onChange    = { handleChangeData}\n          ref         = { refEmail }\n          disabled    = { disableFormController }\n        ></input>\n      </form>\n\n\n      {/* Get Started Today Button */}\n      <button \n        type      = \"button\" \n        className = { buttonLabelGST.cssClass}\n        onClick   = { submitData }\n        disabled  = { disableFormController }\n      >\n        { buttonLabelGST.message }\n      </button>\n\n\n      {/* Show Submissions Button */}\n      <button \n        type      = \"button\" \n        className = { color }\n        onClick   = { onClickShowSubmissions }\n        ref       = { refBtnShowSubmissions }\n        disabled  = { disableFormController }\n      >\n        Show Submissions\n      </button>\n\n\n      <div \n        className = { dropBoxClass }\n      >\n        <ul>{ showSubmissionsContent } </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}